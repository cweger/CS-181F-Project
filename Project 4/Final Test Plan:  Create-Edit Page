Chet Weger

Component Test Plan: Create/Edit Set Page

Testing Summary
    Tests for this model are divided into black box tests and white box tests, and both will be performed with the django.test module.  In the black box testing, the general specification requirements are verified.  The white box testing will test the five view functions as well as performing additional tests to ensure full code coverage.

Testing Framework

To test this module, we will primarily use the django.test module which is based off of a standard python test module, unittest.  This will enable us to automate our black box and white box tests.  The django.test module works by communicating directly with the django framework and avoiding the overhead of having to communicate with the server (although tests integrating a server can also be performed).  HttpRequest get and post methods are simulated with the django.test get([url]) and post([url], [data]) functions.  These get() and post() functions return django response objects.  In order to verify that tests have full code coverage, django provides a simple way of integrating the coverage.py module.  Tests of this module will be run in the tests.py file.

Test Index
1. Black Box Testing:
    1.0 Display the list page
    1.1 Add flashcards to a set
    1.2 Display the detail page
    1.3 Delete flashcards from a set
    1.4 Series of delete and create operations
    1.5 Modify existing flashcards within a set
2. White Box Testing:

2.0 Submit incorrect flashcard creation data (non-integer or non-unique flashcard order)

2.1 Submit incorrect flashcard modification data (non-integer or non-unique order)

Test Descriptions
1. Black Box Testing: In general, the black box testing will be performed by calling a series of post() and get() functions.  The final return response object will then be examined closely to make sure it matches what is expected.  A true value will be returned for a successful matching.  To make these calls, the urls must be entered in as arguments into the functions as well as any HttpRequest POST data.  While this does require basic knowledge of the url mapping scheme, the intent is to automate as closely as possible the actions of an actual user.

1.0 Display the list page: This test verifies that the initial page that displays the list of cards in a set loads successfully.

1.1 Add flashcards to a set: This test verifies that a flashcard can be successfully added to the set.  This test will be performed by first creating a new flashcard, and then navigating back to the list page, and then opening it again and checking that the contents match what is expected.

1.2 Display the detail page: This test verifies that our system can display the details of a flashcard.

1.3 Delete flashcards from a set: This test verifies that when a flashcard is opened and deleted (and navigation is restored to the list() page), the flashcard will have disappeared from the list.

1.4 Series of delete and create operations:  This tests that the system can handle a series of delete and create operations, and that the resulting cardTable has the expected number of flashcards.

1.5 Modify existing flashcards within a set: This test verifies that a flashcardâ€™s front and back sides can be successfully modified.

2. White Box Testing: Like black box testing, the white box testing will work by calling a series of post() and get() functions.  The following white box tests will be run:

2.0 Submit incorrect flashcard creation data (non-integer non-unique flashcard cardID): This test works to see that incorrect user data causes an error to be displayed.

2.1 Submit incorrect flashcard modification data (non-unique flashcard cardID): This test also checks to see that an error is displayed.
